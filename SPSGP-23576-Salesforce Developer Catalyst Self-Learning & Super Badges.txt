MaintenanceRequest.apxt
 trigger MaintenanceRequest on Case (before update, after update) {   
  if(Trigger.isUpdate && Trigger.isAfter){         MaintenanceRequestHelper.updateWorkOrders(Trigger.New, Trigger.OldMap);     
} }



MaintenanceRequestHelper.apxc:

public with sharing class MaintenanceRequestHelper {
public static void updateworkOrders(List updWorkOrders, Map nonUpdCaseMap) {
  Set validIds = new Set();
For (Case c : updWorkOrders){ 
            if (nonUpdCaseMap.get(c.Id).Status != 'Closed' && c.Status == 'Closed'){ 
                if (c.Type == 'Repair' || c.Type == 'Routine Maintenance'){   
                        validIds.add(c.Id); 
}
}
}
  if (!validIds.isEmpty()){
             List newCases = new List();
            Map closedCasesM = new Map([SELECT Id, Vehicle__c, Equipment__c, 
Equipment__r.Maintenance_Cycle__c,(SELECT Id,Equipment__c,Quantity__c FROM Equipment_Maintenance_Items__r)
FROM Case WHERE Id IN :validIds]); 
 Map maintenanceCycles = new Map(); 
AggregateResult[] results = [SELECT Maintenance_Request__c, MIN(Equipment__r.Maintenance_Cycle__c)cycle FROM Equipment_Maintenance_Item__c WHERE Maintenance_Request__c IN :ValidIds GROUP BY Maintenance_Request__c];

for (AggregateResult ar : results){
             maintenanceCycles.put((Id) ar.get('Maintenance_Request__c'), (Decimal) ar.get('cycle'));         }             

for(Case cc : closedCasesM.values()){
                 Case nc = new Case (
                     ParentId = cc.Id,
                 Status = 'New', 
                    Subject = 'Routine Maintenance',
                     Type = 'Routine Maintenance',
                     Vehicle__c = cc.Vehicle__c,
                     Equipment__c =cc.Equipment__c,
                     Origin = 'Web',
                     Date_Reported__c = Date.Today()
   );
If (maintenanceCycles.containskey(cc.Id)){

 nc.Date_Due__c = Date.today().addDays((Integer) maintenanceCycles.get(cc.Id));
} else { 
nc.Date_Due__c = Date.today().addDays((Integer) cc.Equipment__r.maintenance_Cycle__c);                 }

  newCases.add(nc);
}

  insert newCases;
                         
  List<Equipment_Maintenance_Item__c>clonedWPs = new List<Equipment_Maintenance_Item__c>();
 for (Case nc : newCases){
                 for (Equipment_Maintenance_Item__c wp: closedCasesM.get(nc.ParentId).Equipment_Maintenance_Items__r){
                 Equipment_Maintenance_Item__c wpClone = wp.clone();

  wpClone.Maintenance_Request__c = nc.Id;
                     ClonedWPs.add(wpClone); 

}
}             
insert ClonedWPs;
         }     
} 
}


WarehouseCalloutService.apxc:


public with sharing class WarehouseCalloutService implements Queueable {
    private static final String WAREHOUSE_URL = 'https://th-superbadge-apex.herokuapp.com/equipment';
    
    //Write a class that makes a REST callout to an external warehouse system to get a list of equipment that needs to be updated.
    //The callout’s JSON response returns the equipment records that you upsert in Salesforce. 
    
    @future(callout=true)
    public static void runWarehouseEquipmentSync(){
        System.debug('go into runWarehouseEquipmentSync');
        Http http = new Http();
        HttpRequest request = new HttpRequest();
        
        request.setEndpoint(WAREHOUSE_URL);
        request.setMethod('GET');
        HttpResponse response = http.send(request);
        
        List<Product2> product2List = new List<Product2>();
        System.debug(response.getStatusCode());
        if (response.getStatusCode() == 200){
            List<Object> jsonResponse = (List<Object>)JSON.deserializeUntyped(response.getBody());
            System.debug(response.getBody());
            
            //class maps the following fields: 
            //warehouse SKU will be external ID for identifying which equipment records to update within Salesforce
            for (Object jR : jsonResponse){
                Map<String,Object> mapJson = (Map<String,Object>)jR;
                Product2 product2 = new Product2();
                //replacement part (always true),
                product2.Replacement_Part__c = (Boolean) mapJson.get('replacement');
                //cost
                product2.Cost__c = (Integer) mapJson.get('cost');
                //current inventory
                product2.Current_Inventory__c = (Double) mapJson.get('quantity');
                //lifespan
                product2.Lifespan_Months__c = (Integer) mapJson.get('lifespan');
                //maintenance cycle
                product2.Maintenance_Cycle__c = (Integer) mapJson.get('maintenanceperiod');
                //warehouse SKU                
                product2.Warehouse_SKU__c = (String) mapJson.get('sku');
                
                product2.Name = (String) mapJson.get('name');
                product2.ProductCode = (String) mapJson.get('_id');
                product2List.add(product2);
            }
            
            if (product2List.size() > 0){
                upsert product2List;
                System.debug('Your equipment was synced with the warehouse one');
            }
        }
    }
    
    public static void execute (QueueableContext context){
        System.debug('start runWarehouseEquipmentSync');
        runWarehouseEquipmentSync();
        System.debug('end runWarehouseEquipmentSync');
    }
    
}

MaintenanceRequestHelperTest.apxc :

@istest
 public with sharing class MaintenanceRequestHelperTest { 



private static final string STATUS_NEW = 'New';
 private static final string WORKING = 'Working'; 
private static final string CLOSED = 'Closed';
 private static final string REPAIR = 'Repair';
 private static final string REQUEST_ORIGIN = 'Web';
 private static final string REQUEST_TYPE = 'Routine Maintenance';
 private static final string REQUEST_SUBJECT = 'Testing subject';

PRIVATE STATIC Vehicle__c createVehicle(){
 Vehicle__c Vehicle = new Vehicle__C(name = 'SuperTruck');
 return Vehicle; 
}

 PRIVATE STATIC Product2 createEq(){
product2 equipment = new product2(name = 'SuperEquipment',
 lifespan_months__C = 10,
 maintenance_cycle__C = 10,
 replacement_part__c = true);
 return equipment; 

} 
PRIVATE STATIC Case createMaintenanceRequest(id vehicleId, id equipmentId){
case cs = new case(Type=REPAIR,
 Status=STATUS_NEW, Origin=REQUEST_ORIGIN,
 Subject=REQUEST_SUBJECT,
 Equipment__c=equipmentId, Vehicle__c=vehicleId);
 return cs;
 } 
PRIVATE STATIC Equipment_Maintenance_Item__c createWorkPart(id equipmentId,id requestId){
Equipment_Maintenance_Item__c wp = new Equipment_Maintenance_Item__c(Equipment__c = equipmentId,
 Maintenance_Request__c = requestId);
 return wp; 
} 
@istest private static void testMaintenanceRequestPositive(){
Vehicle__c vehicle = createVehicle();
insert vehicle;
id vehicleId = vehicle.Id;

Product2 equipment = createEq();
insert equipment;
id equipmentId = equipment.Id;
case somethingToUpdate = createMaintenanceRequest(vehicleId,equipmentId);
insert somethingToUpdate; 
Equipment_Maintenance_Item__c workP =createWorkPart(equipmentId,somethingToUpdate.id);
insert workP; 
test.startTest();
somethingToUpdate.status = CLOSED;
update somethingToUpdate;
test.stopTest();

Case newReq = [Select id, subject, type, Equipment__c, Date_Reported__c, Vehicle__c, Date_Due__c
from case
where status =:STATUS_NEW];

Equipment_Maintenance_Item__c workPart = [select id
from Equipment_Maintenance_Item__c
where Maintenance_Request__c =:newReq.Id];

system.assert(workPart != null); system.assert(newReq.Subject != null); system.assertEquals(newReq.Type, REQUEST_TYPE); SYSTEM.assertEquals(newReq.Equipment__c, equipmentId); SYSTEM.assertEquals(newReq.Vehicle__c, vehicleId); SYSTEM.assertEquals(newReq.Date_Reported__c, system.today());
}
@istest
private static void testMaintenanceRequestNegative(){ Vehicle__C vehicle =createVehicle();
insert vehicle;
id vehicleId = vehicle.Id; 
product2 equipment = createEq();
insert equipment;
id equipmentId = equipment.Id; 

case emptyReq = createMaintenanceRequest(vehicleId,equipmentId);
insert emptyReq;
Equipment_Maintenance_Item__c workP = createWorkPart(equipmentId, emptyReq.Id); insert workP;

test.startTest();
emptyReq.Status = WORKING;
update emptyReq;
test.stopTest();

list allRequest = [select id
from case];

Equipment_Maintenance_Item__c workPart = [select id
from Equipment_Maintenance_Item__c
where Maintenance_Request__c = :emptyReq.Id];

system.assert(workPart != null);
system.assert(allRequest.size() == 1);
}

@istest
private static void testMaintenanceRequestBulk(){
list vehicleList = new list();
list equipmentList = new list();
list workPartList = new list();
list requestList = new list();
list oldRequestIds = new list();

for(integer i = 0; i < 300; i++){
vehicleList.add(createVehicle());
equipmentList.add(createEq());
}

insert vehicleList;
insert equipmentList;
for(integer i = 0; i < 300; i++){
	requestList.add(createMaintenanceRequest(vehicleList.get(i).id,equipmentList.get(i).id));
}
insert requestList; 
for(integer i = 0; i < 300; i++){
workPartList.add(createWorkPart(equipmentList.get(i).id, requestList.get(i).id));
}
insert workPartList; 

test.startTest();
for(case req : requestList){
req.Status = CLOSED;
oldRequestIds.add(req.Id);
}

update requestList;
test.stopTest(); 
list allRequests = [select id
	from case
where status =: STATUS_NEW];

list workParts = [select id
from Equipment_Maintenance_Item__c
where Maintenance_Request__c in: oldRequestIds];
system.assert(allRequests.size() == 300);
} } 

MaintenanceRequestHelper.apxc:

public with sharing class MaintenanceRequestHelper {
 public static void updateworkOrders(List updWorkOrders, Map nonUpdCaseMap) {
Set validIds = new Set(); 

For (Case c : updWorkOrders){
             if (nonUpdCaseMap.get(c.Id).Status != 'Closed' && c.Status == 'Closed'){
                 if (c.Type == 'Repair' || c.Type == 'Routine Maintenance'){
                     validIds.add(c.Id);
                                                    }
             }
         }

 if (!validIds.isEmpty()){
             List newCases = new List();
             Map closedCasesM = new Map([SELECT Id, Vehicle__c, Equipment__c, 
	Equipment__r.Maintenance_Cycle__c,(SELECT Id,Equipment__c,Quantity__c FROM Equipment_Maintenance_Items__r)
FROM Case WHERE Id IN :validIds]); 
  Map maintenanceCycles = new Map();
AggregateResult[] results = [SELECT Maintenance_Request__c, MIN(Equipment__r.Maintenance_Cycle__c)cycle FROM Equipment_Maintenance_Item__c WHERE Maintenance_Request__c IN :ValidIds GROUP BY Maintenance_Request__c]; 

  for (AggregateResult ar : results){
             maintenanceCycles.put((Id) ar.get('Maintenance_Request__c'), (Decimal) ar.get('cycle'));         }

    for(Case cc : closedCasesM.values()){
                 Case nc = new Case (
                     ParentId = cc.Id,
                 Status = 'New',
                     Subject = 'Routine Maintenance',
                     Type = 'Routine Maintenance',
                    Vehicle__c = cc.Vehicle__c,
                     Equipment__c =cc.Equipment__c,
                     Origin = 'Web',
                     Date_Reported__c = Date.Today()
          );

  If (maintenanceCycles.containskey(cc.Id)){
                     nc.Date_Due__c = Date.today().addDays((Integer) maintenanceCycles.get(cc.Id));                 }

newCases.add(nc); 
}
 insert newCases;

  List clonedWPs = new List();
           for (Case nc : newCases){
 	for (Equipment_Maintenance_Item__c wp : closedCasesM.get(nc.ParentId).Equipment_Maintenance_Items__r){
                     Equipment_Maintenance_Item__c wpClone = wp.clone();                    wpClone.Maintenance_Request__c = nc.Id;
                     ClonedWPs.add(wpClone); 
insert ClonedWPs;
         }
     }
 }

 MaintenanceRequest.apxt :

trigger MaintenanceRequest on Case (before update, after update) {
 if(Trigger.isUpdate && Trigger.isAfter){
MaintenanceRequestHelper.updateWorkOrders(Trigger.New, Trigger.OldMap); 
}
 }





WarehouseCalloutService.apxc :-

public with sharing class WarehouseCalloutService { 

  private static final String WAREHOUSE_URL = 'https://th-superbadge-apex.herokuapp.com/equipment';

          //@future(callout=true)
     public static void runWarehouseEquipmentSync(){

 Http http = new Http();
         HttpRequest request = new HttpRequest(); 
  request.setEndpoint(WAREHOUSE_URL);         
request.setMethod('GET');
  HttpResponse response = http.send(request); 

List<Product2>warehouseEq = new List<Product2>();

if (response.getStatusCode() == 200){
             List jsonResponse = (List)JSON.deserializeUntyped(response.getBody());             System.debug(response.getBody()); 

for (Object eq : jsonResponse){
                 Map mapJson = (Map)eq;
                 Product2 myEq = new Product2();
                 myEq.Replacement_Part__c = (Boolean) mapJson.get('replacement');
myEq.Name = (String) mapJson.get('name');
                 myEq.Maintenance_Cycle__c = (Integer) mapJson.get('maintenanceperiod');               				myEq.Lifespan_Months__c = (Integer) mapJson.get('lifespan');
                 myEq.Cost__c = (Decimal) mapJson.get('lifespan');
                 myEq.Warehouse_SKU__c = (String) mapJson.get('sku'); 
                myEq.Current_Inventory__c = (Double) mapJson.get('quantity'); 
                warehouseEq.add(myEq);  
           } 

if (warehouseEq.size() > 0){
                 upsert warehouseEq;
                 System.debug('Your equipment was synced with the warehouse one');
                 System.debug(warehouseEq);
             }
            }
     }
 }



 WarehouseCalloutServicesTest.apxc:


@isTest private class WarehouseCalloutServiceTest {
 @isTest static void testWareHouseCallout(){
 Test.startTest(); //implement mock callout test here 
Test.setMock(HTTPCalloutMock.class, new WarehouseCalloutServiceMock()); WarehouseCalloutService.runWarehouseEquipmentSync();
 Test.stopTest();
 System.assertEquals(1, [SELECT count() FROM Product2]);
 }
 }


WarehouseCalloutServiceMock.apxc :-


 @isTest
 global class WarehouseCalloutServiceMock implements HttpCalloutMock {
 // implement http mock callout
 global static HttpResponse respond(HttpRequest request){
 System.assertEquals('https://th-superbadge-apex.herokuapp.com/equipment', request.getEndpoint());
 System.assertEquals('GET', request.getMethod());
 // Create a fake response HttpResponse response = new HttpResponse(); response.setHeader('Content-Type', 'application/json'); 
response.setBody('[{"_id":"55d66226726b611100aaf741","replacement":false,"quantity":5,"name":"Generator 1000 kW","maintenanceperiod":365,"lifespan":120,"cost":5000,"sku":"100003"}]'); response.setStatusCode(200); return response; 
}
 }

 WarehouseSyncSchedule.apxc:-

 global class WarehouseSyncSchedule implements Schedulable {
 global void execute(SchedulableContext ctx) { WarehouseCalloutService.runWarehouseEquipmentSync();
 }
 }

WarehouseSyncSchedule.apxc:- 


@isTest

 public class WarehouseSyncScheduleTest {
 @isTest static void WarehousescheduleTest(){  
String scheduleTime = '00 00 01 * * ?';
 Test.startTest();
 Test.setMock(HttpCalloutMock.class, new WarehouseCalloutServiceMock());
 String jobID=System.schedule('Warehouse Time To Schedule to Test', scheduleTime, new WarehouseSyncSchedule());
 Test.stopTest();
 //Contains schedule information for a scheduled job.CronTrigger is similar to a cron job on UNIX systems. 
// This object is available in API version 17.0 and later. 
CronTrigger a=[SELECT Id FROM CronTrigger where NextFireTime > today]; System.assertEquals(jobID, a.Id,'Schedule '); 
}
 }



 Process Automation Superbadge: 


Challenge 1 :
 Automate leads 
There are 3 major requirements here testing the knowledge of Create validation and assignment rules.
 Req 1:
 Is there any way you can prevent a lead from being created if the lead isn’t located in a US state and make sure that all leads have the standard 2-character US state abbreviation in the State/Province field and either US, USA, United States, or nothing in the Country field
 Req 2:
 Routing leads to the right group Leads from the website get assigned to the Rainbow Sales team, and leads from partners and purchased lists get assigned to Assembly System Sales.
 Challenge 2: Automate Accounts The second requirement deals with Account object and creation of the rollup summary fields and formula fields 
Req 1:
 New account cannot be created unless the shipping and billing state fields are valid US state abbreviations, and the country field is either blank or US, USA, or United States
 Req 2: 
If the account type is either “Customer - Direct” or “Customer - Channel” we don’t want anybody to change the name.
 Req 3:
 Rollup Summary fields :number of deals, number of won deals, when the last deal was won, what our win percentage is, and the total amount of deals we won. and Call for Service formula fields 

Challenge 3:
 Create Robot Setup Object
 Req 1
 Every sale we close and win, we need a setup record created that we can use for scheduling. If we delete a deal for any reason the setup record should also be deleted. We need to see the setup date and we also need a spot for the technician or the rep to make notes about the setup.
 Req 2
 Automatically calculate and display which day of the week the setup date is, like Monday, Tuesday, Friday.
 Req 3: 
Records can just be auto-numbered like ROBOT SETUP

 Challenge 4:
 Create Sales Process and Validate Opportunities
 Req 1 
Stages to be used in Sales process Prospecting, Qualification, Proposal/Price Quote, Negotiation/Review, Awaiting Approval, Closed Won, and Closed Lost 
Req 2: 
Biggest deals--anything over $100K--have to be approved before they can close.We should have a way to show on the record that the deal is approved--maybe you can add an “Approved” checkbox to the opportunity. 

Challenge 5 : Automate Opportunity Create an approval process as defined below which will invoked using Process Builder

 Challenge 6

Create Flow for Opportunities: Challenge 7 Automate Setups In the ProcessBuilder created above , for the RobotSetup record action steps , update the formula for date field.